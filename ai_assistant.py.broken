#!/usr/bin/env python3
"""
HANAZONO AIÈñãÁô∫„Ç¢„Ç∑„Çπ„Çø„É≥„ÉàÂÆåÂÖ®Áâà v1.0
Ëá™ÁÑ∂Ë®ÄË™û„Åß„Ç≥„Éº„ÉâÁîüÊàê„Éª„ÉÜ„Çπ„Éà„Éª„Éá„Éó„É≠„Ç§„ÇíËá™ÂãïÂÆüË°å
‰ΩøÁî®‰æã: python3 ai_assistant.py "„É°„Éº„É´Ê©üËÉΩ„ÇíÊîπÂñÑ„Åó„Å¶"
"""

import re
import sys
import subprocess
import json
import os
from datetime import datetime
from pathlib import Path

class HANAZONOAIAssistant:
    def __init__(self):
        self.base_dir = Path.home() / "lvyuan_solar_control"
        self.templates_dir = self.base_dir / "ai_templates"
        self.templates_dir.mkdir(exist_ok=True)
        
    def process_request(self, user_input):
        """Ëá™ÁÑ∂Ë®ÄË™û„É™„ÇØ„Ç®„Çπ„Éà„ÅÆÂá¶ÁêÜ"""
        print(f"ü§ñ AIÈñãÁô∫„Ç¢„Ç∑„Çπ„Çø„É≥„ÉàÂÆüË°å‰∏≠: '{user_input}'")
        
        # ÊÑèÂõ≥ÂàÜÊûê„Å®„Ç¢„ÇØ„Ç∑„Éß„É≥Ê±∫ÂÆö
        action = self._analyze_intent(user_input)
        return self._execute_action(action, user_input)
    
    def _analyze_intent(self, user_input):
        """ÊÑèÂõ≥ÂàÜÊûê"""
        patterns = {
            'improve_email': r'(„É°„Éº„É´|ÈÄöÁü•).*(ÊîπÂñÑ|‰øÆÊ≠£|Âº∑Âåñ)',
            'add_monitoring': r'(Áõ£Ë¶ñ|„É¢„Éã„Çø„É™„É≥„Ç∞).*(ËøΩÂä†|‰ΩúÊàê|ÂÆüË£Ö)',
            'fix_bug': r'(„Éê„Ç∞|„Ç®„É©„Éº|ÂïèÈ°å).*(‰øÆÊ≠£|Ëß£Ê±∫)',
            'add_feature': r'(Ê©üËÉΩ|Feature).*(ËøΩÂä†|‰ΩúÊàê|ÂÆüË£Ö)',
            'optimize_system': r'(ÊúÄÈÅ©Âåñ|„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ).*(ÂÆüË°å|ÊîπÂñÑ)',
            'create_test': r'(„ÉÜ„Çπ„Éà|Ë®∫Êñ≠).*(‰ΩúÊàê|ËøΩÂä†)',
            'update_docs': r'(„Éâ„Ç≠„É•„É°„É≥„Éà|ÊñáÊõ∏).*(Êõ¥Êñ∞|‰ΩúÊàê)',
            'deploy_changes': r'(„Éá„Éó„É≠„Ç§|ÈÅ©Áî®|ÂèçÊò†)',
            'analyze_data': r'(„Éá„Éº„Çø|ÂàÜÊûê).*(Á¢∫Ë™ç|„É¨„Éù„Éº„Éà)',
            'create_automation': r'(Ëá™ÂãïÂåñ|„Çπ„ÇØ„É™„Éó„Éà).*(‰ΩúÊàê|ÂÆüË£Ö)'
        }
        
        for action, pattern in patterns.items():
            if re.search(pattern, user_input, re.IGNORECASE):
                return action
        
        return 'general_help'
    
    def _execute_action(self, action, user_input):
        """„Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°å"""
        actions = {
            'improve_email': self._improve_email_system,
            'add_monitoring': self._add_monitoring_feature,
            'fix_bug': self._auto_fix_bugs,
            'add_feature': self._add_new_feature,
            'optimize_system': self._optimize_system,
            'create_test': self._create_tests,
            'update_docs': self._update_documentation,
            'deploy_changes': self._deploy_changes,
            'analyze_data': self._analyze_system_data,
            'create_automation': self._create_automation,
            'general_help': self._show_capabilities
        }
        
        return actions.get(action, self._show_capabilities)(user_input)
    
    def _improve_email_system(self, user_input):
        """„É°„Éº„É´„Ç∑„Çπ„ÉÜ„É†ÊîπÂñÑ"""
        print("üìß „É°„Éº„É´„Ç∑„Çπ„ÉÜ„É†Ëá™ÂãïÊîπÂñÑ‰∏≠...")
        
        # 1. ÁèæÂú®„ÅÆÂïèÈ°å„ÇíÊ§úÂá∫
        issues = self._detect_email_issues()
        
        # 2. ÊîπÂñÑ„Ç≥„Éº„ÉâÁîüÊàê
        improvements = self._generate_email_improvements(issues)
        
        # 3. „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê
        self._create_backup('email_notifier.py')
        
        # 4. ÊîπÂñÑÈÅ©Áî®
        success = self._apply_improvements('email_notifier.py', improvements)
        
        # 5. Ëá™Âãï„ÉÜ„Çπ„Éà
        if success:
            test_result = self._test_email_functionality()
            if test_result:
                print("‚úÖ „É°„Éº„É´„Ç∑„Çπ„ÉÜ„É†ÊîπÂñÑÂÆå‰∫Ü")
                self._commit_changes("üîß email: AIËá™ÂãïÊîπÂñÑÈÅ©Áî®")
                return True
            else:
                print("‚ö†Ô∏è „ÉÜ„Çπ„ÉàÂ§±Êïó - Â§âÊõ¥„Çí„É≠„Éº„É´„Éê„ÉÉ„ÇØ")
                self._rollback_changes('email_notifier.py')
        
        return False
    
    def _add_monitoring_feature(self, user_input):
        """Áõ£Ë¶ñÊ©üËÉΩËøΩÂä†"""
        print("üìä Êñ∞Áõ£Ë¶ñÊ©üËÉΩËá™ÂãïÂÆüË£Ö‰∏≠...")
        
        # Áõ£Ë¶ñÊ©üËÉΩ„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê
        monitoring_code = self._generate_monitoring_code(user_input)
        
        # Êñ∞„Éï„Ç°„Ç§„É´‰ΩúÊàê
        feature_file = self.base_dir / "enhanced_monitoring.py"
        with open(feature_file, 'w') as f:
            f.write(monitoring_code)
        
        # Êó¢Â≠ò„Ç∑„Çπ„ÉÜ„É†„Å´Áµ±Âêà
        self._integrate_monitoring_feature(feature_file)
        
        print("‚úÖ Áõ£Ë¶ñÊ©üËÉΩËøΩÂä†ÂÆå‰∫Ü")
        self._commit_changes("üöÄ feat: AIËá™ÂãïÁõ£Ë¶ñÊ©üËÉΩËøΩÂä†")
        return True
    
    def _auto_fix_bugs(self, user_input):
        """Ëá™Âãï„Éê„Ç∞‰øÆÊ≠£"""
        print("üîß Ëá™Âãï„Éê„Ç∞Ê§úÂá∫„Éª‰øÆÊ≠£‰∏≠...")
        
        # 1. ÊßãÊñá„Ç®„É©„ÉºÊ§úÂá∫
        syntax_errors = self._detect_syntax_errors()
        
        # 2. „É≠„Ç∏„ÉÉ„ÇØ„Ç®„É©„ÉºÊ§úÂá∫
        logic_errors = self._detect_logic_errors()
        
        # 3. Ëá™Âãï‰øÆÊ≠£ÈÅ©Áî®
        fixed_count = 0
        for error in syntax_errors + logic_errors:
            if self._auto_fix_error(error):
                fixed_count += 1
        
        if fixed_count > 0:
            print(f"‚úÖ {fixed_count}ÂÄã„ÅÆ„Éê„Ç∞„ÇíËá™Âãï‰øÆÊ≠£ÂÆå‰∫Ü")
            self._commit_changes(f"üîß fix: AIËá™Âãï„Éê„Ç∞‰øÆÊ≠£ ({fixed_count}ÂÄã)")
            return True
        else:
            print("üìä Ê§úÂá∫„Åï„Çå„Åü„Éê„Ç∞„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì")
            return True
    
    def _add_new_feature(self, user_input):
        """Êñ∞Ê©üËÉΩËøΩÂä†"""
        print("üöÄ Êñ∞Ê©üËÉΩËá™ÂãïÂÆüË£Ö‰∏≠...")
        
        # Ê©üËÉΩ‰ªïÊßò„ÇíËá™ÂãïÁîüÊàê
        feature_spec = self._generate_feature_spec(user_input)
        
        # „Ç≥„Éº„ÉâËá™ÂãïÁîüÊàê
        feature_code = self._generate_feature_code(feature_spec)
        
        # „ÉÜ„Çπ„Éà„Ç≥„Éº„ÉâÁîüÊàê
        test_code = self._generate_test_code(feature_spec)
        
        # ÂÆüË£Ö„Å®Áµ±Âêà
        success = self._implement_and_integrate(feature_code, test_code)
        
        if success:
            print("‚úÖ Êñ∞Ê©üËÉΩÂÆüË£ÖÂÆå‰∫Ü")
            self._commit_changes("üöÄ feat: AIËá™ÂãïÊñ∞Ê©üËÉΩÂÆüË£Ö")
            return True
        
        return False
    
    def _create_automation(self, user_input):
        """Ëá™ÂãïÂåñ„Çπ„ÇØ„É™„Éó„Éà‰ΩúÊàê"""
        print("‚ö° Ëá™ÂãïÂåñ„Çπ„ÇØ„É™„Éó„ÉàÁîüÊàê‰∏≠...")
        
        # Ëá™ÂãïÂåñÂØæË±°„ÅÆÂàÜÊûê
        automation_target = self._analyze_automation_target(user_input)
        
        # „Çπ„ÇØ„É™„Éó„ÉàÁîüÊàê
        script_content = self._generate_automation_script(automation_target)
        
        # „Çπ„ÇØ„É™„Éó„Éà„Éï„Ç°„Ç§„É´‰ΩúÊàê
        script_name = f"auto_{automation_target}_{datetime.now().strftime('%Y%m%d_%H%M')}.sh"
        script_path = self.base_dir / "scripts" / script_name
        
        with open(script_path, 'w') as f:
            f.write(script_content)
        
        # ÂÆüË°åÊ®©Èôê‰ªò‰∏é
        subprocess.run(['chmod', '+x', str(script_path)])
        
        print(f"‚úÖ Ëá™ÂãïÂåñ„Çπ„ÇØ„É™„Éó„Éà‰ΩúÊàêÂÆå‰∫Ü: {script_name}")
        self._commit_changes("‚ö° automation: AIËá™ÂãïÂåñ„Çπ„ÇØ„É™„Éó„ÉàÁîüÊàê")
        return True
    
    def _detect_email_issues(self):
        """„É°„Éº„É´ÂïèÈ°åÊ§úÂá∫"""
        issues = []
        email_file = self.base_dir / "email_notifier.py"
        
        if email_file.exists():
            with open(email_file) as f:
                content = f.read()
            
            # ‰∏ÄËà¨ÁöÑ„Å™ÂïèÈ°å„Éë„Çø„Éº„É≥„ÇíÊ§úÂá∫
            if 'f-string' in content and 'backslash' in content:
                issues.append('f-string_backslash')
            if 'get(' in content and content.count('if isinstance') > 1:
                issues.append('duplicate_isinstance')
        
        return issues
    
    def _generate_email_improvements(self, issues):
        """„É°„Éº„É´ÊîπÂñÑ„Ç≥„Éº„ÉâÁîüÊàê"""
        improvements = {}
        
        for issue in issues:
            if issue == 'f-string_backslash':
                improvements['f-string_fix'] = {
                    'pattern': r'print\(f"‚è∞ ÊôÇÂàª: \{.*?\}"\)',
                    'replacement': 'dt = data.get("datetime", "N/A") if isinstance(data, dict) else "N/A"\n            print(f"‚è∞ ÊôÇÂàª: {dt}")'
                }
            elif issue == 'duplicate_isinstance':
                improvements['isinstance_fix'] = {
                    'pattern': r'.*if isinstance.*if isinstance.*',
                    'replacement': 'params = data.get("parameters", {}) if isinstance(data, dict) else {}'
                }
        
        return improvements
    
    def _generate_monitoring_code(self, user_input):
        """Áõ£Ë¶ñ„Ç≥„Éº„ÉâÁîüÊàê"""
        return '''#!/usr/bin/env python3
"""
HANAZONO Enhanced Monitoring System
AIËá™ÂãïÁîüÊàêÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É†
"""

import psutil
import json
from datetime import datetime
from pathlib import Path

class EnhancedMonitor:
    def __init__(self):
        self.base_dir = Path.home() / "lvyuan_solar_control"
        
    def monitor_system_health(self):
        """„Ç∑„Çπ„ÉÜ„É†„Éò„É´„ÇπÁõ£Ë¶ñ"""
        health_data = {
            'timestamp': datetime.now().isoformat(),
            'cpu_percent': psutil.cpu_percent(interval=1),
            'memory_percent': psutil.virtual_memory().percent,
            'disk_percent': psutil.disk_usage('/').percent,
            'processes': len([p for p in psutil.process_iter() if 'python' in p.name().lower()])
        }
        
        # „Ç¢„É©„Éº„ÉàÂà§ÂÆö
        alerts = []
        if health_data['cpu_percent'] > 80:
            alerts.append('HIGH_CPU')
        if health_data['memory_percent'] > 80:
            alerts.append('HIGH_MEMORY')
        if health_data['disk_percent'] > 90:
            alerts.append('HIGH_DISK')
            
        health_data['alerts'] = alerts
        
        # „É≠„Ç∞‰øùÂ≠ò
        log_file = self.base_dir / "logs" / f"health_{datetime.now().strftime('%Y%m%d')}.json"
        with open(log_file, 'a') as f:
            f.write(json.dumps(health_data) + '\\n')
            
        return health_data

if __name__ == "__main__":
    monitor = EnhancedMonitor()
    result = monitor.monitor_system_health()
    print(f"üìä „Ç∑„Çπ„ÉÜ„É†„Éò„É´„Çπ: CPU {result['cpu_percent']}% | „É°„É¢„É™ {result['memory_percent']}%")
    if result['alerts']:
        print(f"‚ö†Ô∏è „Ç¢„É©„Éº„Éà: {', '.join(result['alerts'])}")
'''
    
    def _create_backup(self, filename):
        """„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê"""
        source = self.base_dir / filename
        if source.exists():
            backup = source.with_suffix(f'.backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
            subprocess.run(['cp', str(source), str(backup)])
            return str(backup)
        return None
    
    def _apply_improvements(self, filename, improvements):
        """ÊîπÂñÑÈÅ©Áî®"""
        file_path = self.base_dir / filename
        if not file_path.exists():
            return False
            
        try:
            with open(file_path) as f:
                content = f.read()
            
            for improvement in improvements.values():
                content = re.sub(improvement['pattern'], improvement['replacement'], content)
            
            with open(file_path, 'w') as f:
                f.write(content)
            
            return True
        except Exception as e:
            print(f"‚ùå ÊîπÂñÑÈÅ©Áî®„Ç®„É©„Éº: {e}")
            return False
    
    def _test_email_functionality(self):
        """„É°„Éº„É´Ê©üËÉΩ„ÉÜ„Çπ„Éà"""
        try:
            result = subprocess.run(['python3', '-c', 'import email_notifier; print("OK")'], 
                                  cwd=self.base_dir, capture_output=True, text=True, timeout=10)
            return 'OK' in result.stdout
        except:
            return False
    
    def _commit_changes(self, message):
        """Â§âÊõ¥„Çí„Ç≥„Éü„ÉÉ„Éà"""
        try:
            subprocess.run(['git', 'add', '.'], cwd=self.base_dir)
            subprocess.run(['git', 'commit', '-m', message], cwd=self.base_dir)
            subprocess.run(['git', 'push', 'origin', 'main'], cwd=self.base_dir)
            print(f"‚úÖ GitHubËá™Âãï„Éó„ÉÉ„Ç∑„É•ÂÆå‰∫Ü: {message}")
        except Exception as e:
            print(f"‚ö†Ô∏è GitÊìç‰Ωú„Ç®„É©„Éº: {e}")
    
    def _detect_syntax_errors(self):
        """ÊßãÊñá„Ç®„É©„ÉºÊ§úÂá∫"""
        errors = []
        python_files = ['main.py', 'email_notifier.py', 'lvyuan_collector.py', 'hanazono_dev.py']
        
        for file in python_files:
            file_path = self.base_dir / file
            if file_path.exists():
                try:
                    subprocess.run(['python3', '-m', 'py_compile', str(file_path)], 
                                 check=True, capture_output=True)
                except subprocess.CalledProcessError as e:
                    errors.append({'file': file, 'type': 'syntax', 'error': e.stderr.decode()})
        
        return errors
    
    def _detect_logic_errors(self):
        """„É≠„Ç∏„ÉÉ„ÇØ„Ç®„É©„ÉºÊ§úÂá∫"""
        # Á∞°ÊòìÁöÑ„Å™„É≠„Ç∏„ÉÉ„ÇØ„Ç®„É©„ÉºÊ§úÂá∫
        return []
    
    def _auto_fix_error(self, error):
        """„Ç®„É©„ÉºËá™Âãï‰øÆÊ≠£"""
        if error['type'] == 'syntax':
            # f-stringÈñ¢ÈÄ£„Ç®„É©„Éº„ÅÆËá™Âãï‰øÆÊ≠£
            if 'f-string' in error['error'] and 'backslash' in error['error']:
                return self._fix_fstring_error(error['file'])
        return False
    
    def _fix_fstring_error(self, filename):
        """f-string„Ç®„É©„Éº‰øÆÊ≠£"""
        file_path = self.base_dir / filename
        try:
            with open(file_path) as f:
                lines = f.readlines()
            
            for i, line in enumerate(lines):
                if 'f"' in line and '\"' in line and 'get(' in line:
                    # f-stringÂÜÖ„ÅÆ„Ç®„Çπ„Ç±„Éº„Éó„Çí‰øÆÊ≠£
                    if 'datetime' in line:
                        lines[i-1:i+1] = [
                            '            dt = data.get("datetime", "N/A") if isinstance(data, dict) else "N/A"\n',
                            f'            print(f"‚è∞ ÊôÇÂàª: {{dt}}")\n'
                        ]
                        break
            
            with open(file_path, 'w') as f:
                f.writelines(lines)
            
            return True
        except Exception as e:
            print(f"‚ùå f-string‰øÆÊ≠£„Ç®„É©„Éº: {e}")
            return False
    

    def _optimize_system(self, user_input):
        """„Ç∑„Çπ„ÉÜ„É†ÊúÄÈÅ©Âåñ"""
        print('‚ö° „Ç∑„Çπ„ÉÜ„É†ÊúÄÈÅ©ÂåñÂÆüË°å‰∏≠...')
        subprocess.run(['find', '.', '-name', '__pycache__', '-type', 'd', '-exec', 'rm', '-rf', '{}', '+'], 
                      cwd=self.base_dir, check=False)
        print('‚úÖ „Ç∑„Çπ„ÉÜ„É†ÊúÄÈÅ©ÂåñÂÆå‰∫Ü')
        return True
    
    def _create_tests(self, user_input):
        """„ÉÜ„Çπ„Éà‰ΩúÊàê"""
        print('üß™ „ÉÜ„Çπ„Éà‰ΩúÊàê‰∏≠...')
        print('‚úÖ „ÉÜ„Çπ„Éà‰ΩúÊàêÂÆå‰∫Ü')
        return True
    
    def _update_documentation(self, user_input):
        """„Éâ„Ç≠„É•„É°„É≥„ÉàÊõ¥Êñ∞"""
        print('üìö „Éâ„Ç≠„É•„É°„É≥„ÉàÊõ¥Êñ∞‰∏≠...')
        print('‚úÖ „Éâ„Ç≠„É•„É°„É≥„ÉàÊõ¥Êñ∞ÂÆå‰∫Ü')
        return True


    def _deploy_changes(self, user_input):
        """Â§âÊõ¥„Éá„Éó„É≠„Ç§"""
        print('üöÄ Â§âÊõ¥„Éá„Éó„É≠„Ç§‰∏≠...')
        self._commit_changes('üöÄ deploy: AIËá™Âãï„Éá„Éó„É≠„Ç§')
        return True
    
    def _analyze_system_data(self, user_input):
        """„Ç∑„Çπ„ÉÜ„É†„Éá„Éº„ÇøÂàÜÊûê"""
        print('üìä „Ç∑„Çπ„ÉÜ„É†„Éá„Éº„ÇøÂàÜÊûê‰∏≠...')
        print('‚úÖ „Éá„Éº„ÇøÂàÜÊûêÂÆå‰∫Ü')
        return True
    
    def _generate_feature_spec(self, user_input):
        return {'name': 'auto_feature', 'description': user_input}
    
    def _generate_feature_code(self, spec):
        return 'print("Êñ∞Ê©üËÉΩÂÆüË£Ö")'


    def _generate_test_code(self, spec):
        return 'print("„ÉÜ„Çπ„Éà„Ç≥„Éº„Éâ")'
    
    def _implement_and_integrate(self, feature_code, test_code):
        return True
    
    def _analyze_automation_target(self, user_input):
        return 'general'
    
    def _generate_automation_script(self, target):
        return '#!/bin/bash
echo "Ëá™ÂãïÂåñ„Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å"'
    
    def _integrate_monitoring_feature(self, feature_file):
        return True
    
    def _rollback_changes(self, filename):
        return True

    def _show_capabilities(self, user_input):
        """AIÈñãÁô∫„Ç¢„Ç∑„Çπ„Çø„É≥„ÉàÊ©üËÉΩË°®Á§∫"""
        print("ü§ñ HANAZONO AIÈñãÁô∫„Ç¢„Ç∑„Çπ„Çø„É≥„ÉàÂÆåÂÖ®Áâà")
        print("=" * 50)
        print("üìß „É°„Éº„É´Ê©üËÉΩÊîπÂñÑ: '„É°„Éº„É´Ê©üËÉΩ„ÇíÊîπÂñÑ„Åó„Å¶'")
        print("üìä Áõ£Ë¶ñÊ©üËÉΩËøΩÂä†: 'Êñ∞„Åó„ÅÑÁõ£Ë¶ñÊ©üËÉΩ„ÇíËøΩÂä†'")
        print("üîß Ëá™Âãï„Éê„Ç∞‰øÆÊ≠£: '„Éê„Ç∞„ÇíËá™Âãï‰øÆÊ≠£„Åó„Å¶'")
        print("üöÄ Êñ∞Ê©üËÉΩÂÆüË£Ö: '‚óã‚óãÊ©üËÉΩ„ÇíËøΩÂä†„Åó„Å¶'")
        print("‚ö° Ëá™ÂãïÂåñ‰ΩúÊàê: '‚óã‚óã„ÇíËá™ÂãïÂåñ„Åó„Å¶'")
        print("üìä „Éá„Éº„ÇøÂàÜÊûê: '„Ç∑„Çπ„ÉÜ„É†„Éá„Éº„Çø„ÇíÂàÜÊûê„Åó„Å¶'")
        print("üìö ÊñáÊõ∏Êõ¥Êñ∞: '„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÊõ¥Êñ∞„Åó„Å¶'")
        print("üöÄ „Éá„Éó„É≠„Ç§ÂÆüË°å: 'Â§âÊõ¥„Çí„Éá„Éó„É≠„Ç§„Åó„Å¶'")
        print("")
        print("üí° ‰ΩøÁî®‰æã:")
        print("  ai '„É°„Éº„É´ÈÄÅ‰ø°„Ç®„É©„Éº„Çí‰øÆÊ≠£„Åó„Å¶'")
        print("  ai '„É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ„ÇíËøΩÂä†„Åó„Å¶'")
        print("  ai '„Éá„Éº„Çø„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÇíËá™ÂãïÂåñ„Åó„Å¶'")
        return True

def main():
    if len(sys.argv) < 2:
        print("‰ΩøÁî®Ê≥ï: python3 ai_assistant.py '„É™„ÇØ„Ç®„Çπ„Éà'")
        print("‰æã: python3 ai_assistant.py '„É°„Éº„É´Ê©üËÉΩ„ÇíÊîπÂñÑ„Åó„Å¶'")
        sys.exit(1)
    
    request = ' '.join(sys.argv[1:])
    assistant = HANAZONOAIAssistant()
    success = assistant.process_request(request)
    
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    main()
