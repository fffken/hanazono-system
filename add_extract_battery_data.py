import re
with open('email_notifier.py', 'r') as f:
    content = f.read()
extract_battery_data_method = '\n    def _extract_battery_data(self, data):\n        """\n        JSONデータからバッテリー状態情報を抽出します。\n\n        データファイルのJSON構造に基づいて、バッテリーのSOC、電圧、電流などを\n        抽出して辞書形式で返します。\n\n        Args:\n            data (dict/list): データファイルから読み込んだJSONデータ\n\n        Returns:\n            dict: 以下のキーを持つバッテリー情報辞書\n                - soc: バッテリー残量(%)\n                - voltage: バッテリー電圧(V)\n                - current: バッテリー電流(A)\n                - power: バッテリー電力(W)\n                - status: バッテリー状態\n        """\n        # 初期値として全てのデータ項目をNoneに設定\n        battery_data = {\n            "soc": None,\n            "voltage": None,\n            "current": None,\n            "power": None,\n            "status": None\n        }\n\n        try:\n            # データ形式の確認とパラメータへのアクセス\n            if isinstance(data, list) and len(data) > 0:\n                # リスト形式の場合は最初の項目を使用\n                data_item = data[0]\n                if "parameters" in data_item and isinstance(data_item["parameters"], dict):\n                    params = data_item["parameters"]\n\n                    # SOC\n                    if "0x0100" in params:\n                        battery_data["soc"] = params["0x0100"].get("value")\n\n                    # 電圧\n                    if "0x0101" in params:\n                        battery_data["voltage"] = params["0x0101"].get("value")\n\n                    # 電流\n                    if "0x0102" in params:\n                        battery_data["current"] = params["0x0102"].get("value")\n\n                    # 状態（もし利用可能なら）\n                    if "0x020E" in params:\n                        battery_data["status"] = params["0x020E"].get("formatted_value")\n\n                    # 電力は電圧×電流で計算（電流データが異常値でなければ）\n                    if battery_data["voltage"] is not None and battery_data["current"] is not None:\n                        current = battery_data["current"]\n                        # 電流の値が異常に大きい場合は計算しない\n                        if -1000 <= current <= 1000:  # 妥当な範囲内のみ\n                            battery_data["power"] = battery_data["voltage"] * current\n\n            # 処理結果のログ出力（デバッグ用）\n            self.logger.debug(f"バッテリーデータ抽出結果: {battery_data}")\n\n            return battery_data\n\n        except Exception as e:\n            # 例外発生時はエラーをログに記録して初期値を返す\n            self.logger.error(f"バッテリーデータ抽出中にエラーが発生しました: {e}")\n            import traceback\n            self.logger.debug(traceback.format_exc())\n            return battery_data\n'
if '_extract_battery_data' in content:
    pattern = 'def _extract_battery_data\\(self, data\\):.*?(?=\\n    def |$)'
    content = re.sub(pattern, extract_battery_data_method.strip(), content, flags=re.DOTALL)
else:
    pattern = 'def _generate_notes_html\\(self.*?\\n        return ""\\n'
    if re.search(pattern, content, re.DOTALL):
        content = re.sub(pattern, lambda m: m.group(0) + extract_battery_data_method, content, flags=re.DOTALL)
    else:
        pattern = '(class EmailNotifier:.*?)$'
        content = re.sub(pattern, lambda m: m.group(1) + extract_battery_data_method, content, flags=re.DOTALL)
with open('email_notifier.py', 'w') as f:
    f.write(content)
print('_extract_battery_data メソッドが正常に追加/更新されました。')