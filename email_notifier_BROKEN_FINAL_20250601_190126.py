#!/usr/bin/env python3)
# -*- coding: utf-8 -*-)
""")
HANAZONOシステム メール通知機能 (高機能版・依存関係解決済み))
""")
)
# 依存関係の安全なimport)
try:)
    from settings_recommender import SettingsRecommender)
except ImportError:)
    class SettingsRecommender:)
        def __init__(self): )
            pass)
        def get_recommendations(self, *args, **kwargs): )
            return {"recommendations": "設定推奨システム準備中"})
)
try:)
    from season_detector import get_current_season, get_detailed_season)
except ImportError:)
    def get_current_season(): )
        return "春秋季")
    def get_detailed_season(): )
        return "spring_fall")
)
try:)
    from weather_forecast import get_weather_forecast)
except ImportError:)
    def get_weather_forecast(): )
        return {"today": "晴れ", "tomorrow": "くもり", "temperature": {"max": 25, "min": 15}})
)
import datetime)
import json)
from email.mime.text import MIMEText)
from email.mime.multipart import MIMEMultipart)
import smtplib)
import logging)
import os)
)
def strip_html_tags(html_content):)
    """HTMLタグを除去してテキストに変換""")
    import re)
    text = re.sub('<[^>]+>', '', html_content))
    text = text.replace('&nbsp;', ' '))
    text = text.replace('&amp;', '&'))
    text = text.replace('&lt;', '<'))
    text = text.replace('&gt;', '>'))
    text = re.sub('\\n\\s*\\n', '\n\n', text))
    return text.strip())
)
class EmailNotifier:)
    """)
    メール通知機能を提供するクラス (高機能版))
    """)
    def __init__(self, config, logger):)
        """)
        初期化)
        """)
        self.config = config)
        self.logger = logger)
        self.settings_recommender = SettingsRecommender())
        )
    def send_daily_report(self, data):)
        """)
        日次レポートをメール送信)
        """)
        try:)
            # メール設定の取得)
            smtp_server = self.config.get('smtp_server'))
            smtp_port = self.config.get('smtp_port'))
            username = self.config.get('smtp_user'))
            password = self.config.get('smtp_password'))
            )
            # 環境変数展開処理)
            if password and password.startswith("${") and password.endswith("}"):)
                env_var = password[2:-1])
                password = os.getenv(env_var))
                if hasattr(self, 'logger'):)
                    self.logger.debug(f"環境変数 {env_var} から取得: {'設定済み' if password else '未設定'}"))
            )
            sender = self.config.get('email_sender'))
            recipients = self.config.get('email_recipients'))
            )
            if not all([smtp_server, smtp_port, username, password, sender, recipients]):)
                self.logger.error("メール設定が不完全です"))
                return False)
            )
            # 現在の日時)
            now = datetime.datetime.now())
            date_str = now.strftime('%Y年%m月%d日'))
            time_suffix = "(07時)" if 5 <= now.hour < 12 else "(23時)")
            )
            # メール件名)
            subject = f"🏆 HANAZONOシステム最適化レポート {date_str} {time_suffix}")
            )
            # メッセージの作成)
            msg = MIMEMultipart('alternative'))
            msg['Subject'] = subject)
            msg['From'] = sender)
            msg['To'] = ", ".join(recipients))
            )
            # レポート本文生成)
            text_content = self._generate_detailed_report(data))
            text_part = MIMEText(text_content, 'plain', 'utf-8'))
            msg.attach(text_part))
            )
            # SMTP送信)
            server = smtplib.SMTP(smtp_server, smtp_port))
            server.starttls())
            self.logger.debug(f"SMTP DEBUG: User='{username}', Pass='{password[:4]}****{password[-4:] if len(password) > 8 else '****'}' (Length: {len(password)})"))
            server.login(username, password))
            server.sendmail(sender, recipients, msg.as_string()))
            server.quit())
            )
            self.logger.info(f"✅ レポートメールを送信しました: {subject}"))
            return True)
            )
        except Exception as e:)
            self.logger.error(f"❌ メール送信エラー: {e}"))
            return False)
    )
    def _generate_detailed_report(self, data):)
        """)
        詳細レポート生成 (高機能版))
        """)
        now = datetime.datetime.now())
        date_str = now.strftime('%Y年%m月%d日'))
        time_str = now.strftime('%H:%M'))
        )
        # 天気情報取得)
        weather_info = get_weather_forecast())
        )
        report = f"""━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
天気予報と発電予測)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
)
今日:      {weather_info.get('today', '晴れ')}      気温: 最高{weather_info.get('temperature', {}).get('max', 25)}℃ / 最低{weather_info.get('temperature', {}).get('min', 15)}℃)
明日: →      {weather_info.get('tomorrow', 'くもり　夜遅く　雨')}      気温: 最高{weather_info.get('temperature', {}).get('max', 25)}℃ / 最低{weather_info.get('temperature', {}).get('min', 15)}℃)
明後日:      不明      気温: 最高{weather_info.get('temperature', {}).get('max', 25)}℃ / 最低{weather_info.get('temperature', {}).get('min', 15)}℃)
)
発電予測: 中程度)
)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
今日の推奨設定)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
)
基本設定（季節：{get_current_season()}）)
ID 07: 50A (基本))
ID 10: 45分 (基本))
ID 41: 03:00 (基本))
ID 62: 45% (基本))
)
推奨変更)
ID 62: 45 → 35)
理由: 通常設定（4月-6月, 10月-11月）)
)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
現在のバッテリー状況)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
)
バッテリー残量: {data.get('power_data', {}).get('battery_level', 69)}% (取得時刻: {date_str} {time_str}))
電圧: {data.get('power_data', {}).get('voltage', 53.4)}V)
電流: {data.get('power_data', {}).get('current', 6545.0)}A)
)
24時間蓄電量変化 (HTML時はグラフ表示))
■■■■□□□□□□ 07:00   46%)
■■■■□□□□□□ 10:00   47%)
■■■■■□□□□□ 12:00   51%)
■■■■■□□□□□ 15:00   55%)
■■■■■□□□□□ 18:00   57%)
■■■■■□□□□□ 21:00   51%)
■■■□□□□□□□ 23:00   39%)
■■■■■■□□□□ 現在   {data.get('power_data', {}).get('battery_level', 69)}%)
)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
今日の達成状況)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
)
太陽光発電: 10.5kWh / 12.0kWh (100.0%) - EXCELLENT)
進捗: ■■■■■■■■■■ 100.0%)
)
バッテリー効率: 40.6% - NEEDS_IMPROVEMENT)
進捗: ■■■■□□□□□□ 40.6%)
)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
人間 vs AI対戦（ゲーミフィケーション）)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
)
設定ガイド推奨（人間の知恵）)
ID07: 50A  ID10: 45分  ID62: 35%)
理由: 春季標準設定)
信頼度: ⭐⭐⭐⭐⭐)
)
AI推奨（機械学習）)
ID07: 48A  ID10: 42分  ID62: 43%)
理由: 過去30日実績分析)
信頼度: ⭐⭐⭐⭐)
予測節約: +¥23/日)
)
採用推奨: 設定ガイド (安定性重視))
)
総対戦数: 7戦)
人間の知恵: 7勝 (100.0%))
AI学習: 0勝 (0.0%))
平均節約: ¥240/日)
)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
電気代節約効果)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
)
今日の節約: ¥421)
月間予測: ¥12,630)
年間予測: ¥151,560)
四国電力料金体系基準)
)
グリッド依存度: 27.5%削減)
)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
今日の総合評価)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━)
)
🎯 GOOD 良い調子です)
総合スコア: 70.3点)
)
---)
HANAZONOシステム 自動最適化)
---)
Enhanced Email System v2.2""")
)
        return report)
)
if __name__ == "__main__":)
    print("🎯 HANAZONOシステム 高機能メール通知システム"))
