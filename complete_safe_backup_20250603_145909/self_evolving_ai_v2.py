#!/usr/bin/env python3)
""")
自己進化AI統合システム v2.0 - 学習機能強化版)
実問題検出・実用的解決策生成・継続的自動進化)
""")
import os)
import json)
import subprocess)
import re)
import glob)
from datetime import datetime, timedelta)
from pathlib import Path)
)
class SelfEvolvingAIV2:)
    def __init__(self):)
        self.base_dir = "/home/pi/lvyuan_solar_control")
        self.knowledge_base = f"{self.base_dir}/ai_knowledge_v2.json")
        self.solutions_generated = 0)
        self.problems_solved = 0)
        )
        self._initialize_enhanced_knowledge())
        )
    def run_enhanced_evolution(self):)
        """強化された自己進化実行""")
        print("🧬 自己進化AI v2.0 - 学習機能強化版"))
        print("=" * 60))
        print("🚀 実問題検出・実用的解決策生成・継続進化"))
        )
        # Phase 1: 実問題検出（強化版）)
        real_problems = self._detect_real_problems())
        )
        # Phase 2: 学習ベース解決策生成)
        solutions = self._generate_learning_based_solutions(real_problems))
        )
        # Phase 3: 実装・検証・学習)
        results = self._implement_verify_learn(solutions))
        )
        # Phase 4: 知識ベース強化学習)
        self._enhanced_learning_update(results))
        )
        # Phase 5: 自動継続設定)
        self._setup_continuous_evolution())
        )
        # 強化レポート)
        self._generate_enhanced_report(real_problems, results))
        )
    def _detect_real_problems(self):)
        """実問題検出（強化版）""")
        print("\n🔍 実問題検出システム v2.0"))
        )
        real_problems = [])
        )
        # 1. ログファイル詳細分析)
        log_problems = self._analyze_log_files_detailed())
        real_problems.extend(log_problems))
        )
        # 2. システム状態問題検出)
        system_problems = self._detect_system_state_issues())
        real_problems.extend(system_problems))
        )
        # 3. コード品質問題検出)
        code_problems = self._detect_code_quality_issues())
        real_problems.extend(code_problems))
        )
        # 4. パフォーマンス問題検出)
        performance_problems = self._detect_performance_issues())
        real_problems.extend(performance_problems))
        )
        # 5. セキュリティ問題検出)
        security_problems = self._detect_security_issues())
        real_problems.extend(security_problems))
        )
        print(f"   検出された実問題: {len(real_problems)}件"))
        for problem in real_problems:)
            print(f"   🚨 {problem['type']}: {problem['description']}"))
            )
        return real_problems)
        )
    def _analyze_log_files_detailed(self):)
        """ログファイル詳細分析""")
        problems = [])
        )
        log_patterns = {)
            'battery_extraction_error': r'抽出されたバッテリー情報.*N/A',)
            'email_auth_error': r'Username and Password not accepted',)
            'connection_timeout': r'Connection.*timeout',)
            'import_error': r'ImportError|ModuleNotFoundError',)
            'syntax_error': r'SyntaxError|IndentationError',)
            'permission_error': r'Permission denied',)
            'file_not_found': r'FileNotFoundError|No such file',)
            'json_decode_error': r'JSONDecodeError',)
            'memory_error': r'MemoryError|Out of memory',)
            'disk_space_error': r'No space left on device')
        })
        )
        log_files = glob.glob(f"{self.base_dir}/logs/*.log") + [)
            f"{self.base_dir}/solar_control.log",)
            f"{self.base_dir}/predictive_analysis.log")
        ])
        )
        for log_file in log_files:)
            if os.path.exists(log_file):)
                try:)
                    with open(log_file, 'r') as f:)
                        content = f.read())
                    )
                    for error_type, pattern in log_patterns.items():)
                        matches = re.findall(pattern, content, re.IGNORECASE))
                        if matches:)
                            problems.append({)
                                'type': f'log_{error_type}',)
                                'description': f'{log_file}で{error_type}検出: {len(matches)}回',)
                                'file': log_file,)
                                'severity': 'high' if error_type in ['syntax_error', 'import_error'] else 'medium',)
                                'evidence': matches[:3],  # 最初の3つの証拠)
                                'auto_fixable': True)
                            }))
                except Exception as e:)
                    problems.append({)
                        'type': 'log_analysis_error',)
                        'description': f'ログ分析エラー: {log_file} - {e}',)
                        'severity': 'low',)
                        'auto_fixable': False)
                    }))
                    )
        return problems)
        )
    def _detect_system_state_issues(self):)
        """システム状態問題検出""")
        problems = [])
        )
        try:)
            import psutil)
            )
            # CPU使用率チェック)
            cpu_percent = psutil.cpu_percent(interval=1))
            if cpu_percent > 85:)
                problems.append({)
                    'type': 'high_cpu_usage',)
                    'description': f'CPU使用率異常: {cpu_percent}%',)
                    'severity': 'medium',)
                    'auto_fixable': True,)
                    'fix_method': 'process_optimization')
                }))
            )
            # メモリ使用率チェック)
            memory = psutil.virtual_memory())
            if memory.percent > 85:)
                problems.append({)
                    'type': 'high_memory_usage',)
                    'description': f'メモリ使用率異常: {memory.percent}%',)
                    'severity': 'medium',)
                    'auto_fixable': True,)
                    'fix_method': 'memory_cleanup')
                }))
            )
            # ディスク容量チェック)
            disk = psutil.disk_usage('/'))
            if disk.percent > 90:)
                problems.append({)
                    'type': 'disk_space_critical',)
                    'description': f'ディスク容量危険: {disk.percent}%',)
                    'severity': 'high',)
                    'auto_fixable': True,)
                    'fix_method': 'disk_cleanup')
                }))
                )
        except ImportError:)
            problems.append({)
                'type': 'missing_dependency',)
                'description': 'psutilモジュールが見つかりません',)
                'severity': 'medium',)
                'auto_fixable': True,)
                'fix_method': 'install_package')
            }))
            )
        return problems)
        )
    def _detect_code_quality_issues(self):)
        """コード品質問題検出""")
        problems = [])
        )
        python_files = glob.glob(f"{self.base_dir}/*.py"))
        )
        for py_file in python_files:)
            try:)
                # 構文チェック)
                result = subprocess.run(['python3', '-m', 'py_compile', py_file], )
                                      capture_output=True, text=True))
                if result.returncode != 0:)
                    problems.append({)
                        'type': 'syntax_error',)
                        'description': f'{py_file}に構文エラー',)
                        'file': py_file,)
                        'severity': 'high',)
                        'auto_fixable': True,)
                        'fix_method': 'syntax_fix',)
                        'error_details': result.stderr)
                    }))
                )
                # コード分析)
                with open(py_file, 'r') as f:)
                    code = f.read())
                    )
                # 潜在的問題パターン検出)
                if re.search(r'except:\s*pass', code):)
                    problems.append({)
                        'type': 'empty_exception_handler',)
                        'description': f'{py_file}に空の例外ハンドラー',)
                        'file': py_file,)
                        'severity': 'low',)
                        'auto_fixable': True,)
                        'fix_method': 'improve_exception_handling')
                    }))
                    )
                if re.search(r'print\s*\(.*password.*\)', code, re.IGNORECASE):)
                    problems.append({)
                        'type': 'password_in_print',)
                        'description': f'{py_file}でパスワードがprint文に含まれる可能性',)
                        'file': py_file,)
                        'severity': 'high',)
                        'auto_fixable': True,)
                        'fix_method': 'remove_sensitive_prints')
                    }))
                    )
            except Exception as e:)
                problems.append({)
                    'type': 'code_analysis_error',)
                    'description': f'{py_file}の分析エラー: {e}',)
                    'severity': 'low',)
                    'auto_fixable': False)
                }))
                )
        return problems)
        )
    def _detect_performance_issues(self):)
        """パフォーマンス問題検出""")
        problems = [])
        )
        # 大きなファイルの検出)
        large_files = [])
        for file_path in glob.glob(f"{self.base_dir}/**/*", recursive=True):)
            if os.path.isfile(file_path):)
                try:)
                    size = os.path.getsize(file_path))
                    if size > 10 * 1024 * 1024:  # 10MB以上)
                        large_files.append((file_path, size)))
                except:)
                    pass)
                    )
        if large_files:)
            problems.append({)
                'type': 'large_files_detected',)
                'description': f'大きなファイル検出: {len(large_files)}個',)
                'severity': 'low',)
                'auto_fixable': True,)
                'fix_method': 'file_compression',)
                'details': large_files[:5])
            }))
        )
        # 多数のバックアップファイル検出)
        backup_files = glob.glob(f"{self.base_dir}/**/*.backup*", recursive=True))
        if len(backup_files) > 20:)
            problems.append({)
                'type': 'excessive_backups',)
                'description': f'過剰なバックアップファイル: {len(backup_files)}個',)
                'severity': 'medium',)
                'auto_fixable': True,)
                'fix_method': 'backup_cleanup')
            }))
            )
        return problems)
        )
    def _detect_security_issues(self):)
        """セキュリティ問題検出""")
        problems = [])
        )
        # 権限チェック)
        sensitive_files = ['settings.json', '*.py'])
        for pattern in sensitive_files:)
            for file_path in glob.glob(f"{self.base_dir}/{pattern}"):)
                try:)
                    stat_info = os.stat(file_path))
                    # 他者読み取り可能チェック)
                    if stat_info.st_mode & 0o044:)
                        problems.append({)
                            'type': 'file_permission_issue',)
                            'description': f'{file_path}が他者から読み取り可能',)
                            'file': file_path,)
                            'severity': 'medium',)
                            'auto_fixable': True,)
                            'fix_method': 'fix_permissions')
                        }))
                except:)
                    pass)
                    )
        return problems)
        )
    def _generate_learning_based_solutions(self, problems):)
        """学習ベース解決策生成""")
        print("\n🧠 学習ベース解決策生成"))
        )
        solutions = [])
        )
        # 知識ベース読み込み)
        with open(self.knowledge_base, 'r') as f:)
            knowledge = json.load(f))
            )
        for problem in problems:)
            if problem.get('auto_fixable', False):)
                solution = self._create_solution_for_problem(problem, knowledge))
                if solution:)
                    solutions.append(solution))
                    print(f"   ✨ 解決策生成: {problem['type']}"))
                    )
        return solutions)
        )
    def _create_solution_for_problem(self, problem, knowledge):)
        """問題に対する解決策作成""")
        problem_type = problem['type'])
        )
        # 過去の成功パターンチェック)
        if problem_type in knowledge.get('successful_fixes', {}):)
            past_solution = knowledge['successful_fixes'][problem_type])
            confidence = past_solution.get('success_rate', 0.5))
        else:)
            confidence = 0.6)
            )
        # 問題タイプ別解決策生成)
        solution_generators = {)
            'log_battery_extraction_error': self._generate_battery_fix,)
            'log_email_auth_error': self._generate_email_fix,)
            'syntax_error': self._generate_syntax_fix,)
            'high_cpu_usage': self._generate_cpu_optimization,)
            'high_memory_usage': self._generate_memory_optimization,)
            'disk_space_critical': self._generate_disk_cleanup,)
            'file_permission_issue': self._generate_permission_fix,)
            'excessive_backups': self._generate_backup_cleanup)
        })
        )
        generator = solution_generators.get(problem_type))
        if generator:)
            return generator(problem, confidence))
            )
        return None)
        )
    def _generate_battery_fix(self, problem, confidence):)
        """バッテリー抽出修正生成""")
        return {)
            'problem': problem,)
            'method': 'battery_extraction_fix',)
            'code': ''')
# 自動生成：バッテリー情報抽出修正)
def fix_battery_extraction():)
    try:)
        from ai_auto_resolver_v2 import AIAutoResolverV2)
        resolver = AIAutoResolverV2())
        return resolver.solve_email_battery_issue())
    except Exception as e:)
        print(f"バッテリー修正エラー: {e}"))
        return False)
''',)
            'confidence': confidence,)
            'estimated_time': 30)
        })
        )
    def _generate_email_fix(self, problem, confidence):)
        """メール認証修正生成""")
        return {)
            'problem': problem,)
            'method': 'email_auth_fix',)
            'code': ''')
# 自動生成：メール認証修正)
def fix_email_auth():)
    import os)
    if 'SMTP_PASSWORD' not in os.environ:)
        print("SMTP_PASSWORD環境変数が設定されていません"))
        return False)
    return True)
''',)
            'confidence': confidence,)
            'estimated_time': 10)
        })
        )
    def _generate_syntax_fix(self, problem, confidence):)
        """構文エラー修正生成""")
        return {)
            'problem': problem,)
            'method': 'syntax_fix',)
            'code': f''')
# 自動生成：構文エラー修正)
def fix_syntax_error():)
    import subprocess)
    file_path = "{problem.get('file', '')}")
    result = subprocess.run(['python3', '-m', 'py_compile', file_path], )
                          capture_output=True, text=True))
    if result.returncode == 0:)
        print(f"{{file_path}} 構文チェック成功"))
        return True)
    else:)
        print(f"構文エラー詳細: {{result.stderr}}"))
        return False)
''',)
            'confidence': confidence,)
            'estimated_time': 60)
        })
        )
    def _generate_cpu_optimization(self, problem, confidence):)
        """CPU最適化生成""")
        return {)
            'problem': problem,)
            'method': 'cpu_optimization',)
            'code': ''')
# 自動生成：CPU最適化)
def optimize_cpu():)
    import subprocess)
    import psutil)
    )
    # 重いプロセス確認)
    processes = [])
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):)
        if proc.info['cpu_percent'] > 10:)
            processes.append(proc.info))
    )
    print(f"高CPU使用プロセス: {len(processes)}個"))
    return True)
''',)
            'confidence': confidence,)
            'estimated_time': 20)
        })
        )
    def _generate_memory_optimization(self, problem, confidence):)
        """メモリ最適化生成""")
        return {)
            'problem': problem,)
            'method': 'memory_optimization',)
            'code': ''')
# 自動生成：メモリ最適化)
def optimize_memory():)
    import gc)
    import subprocess)
    )
    # ガベージコレクション実行)
    collected = gc.collect())
    )
    # Python cacheクリア)
    subprocess.run(['find', '.', '-name', '__pycache__', '-type', 'd', )
                   '-exec', 'rm', '-rf', '{}', '+']))
    )
    print(f"メモリ最適化完了: {collected}オブジェクト解放"))
    return True)
''',)
            'confidence': confidence,)
            'estimated_time': 15)
        })
        )
    def _generate_disk_cleanup(self, problem, confidence):)
        """ディスククリーンアップ生成""")
        return {)
            'problem': problem,)
            'method': 'disk_cleanup',)
            'code': ''')
# 自動生成：ディスククリーンアップ)
def cleanup_disk():)
    import subprocess)
    import glob)
    )
    cleaned = 0)
    )
    # 古いログファイル削除)
    old_logs = glob.glob("logs/*.log.*"))
    for log in old_logs:)
        try:)
            os.remove(log))
            cleaned += 1)
        except:)
            pass)
    )
    # 一時ファイル削除)
    subprocess.run(['find', '/tmp', '-name', '*hanazono*', '-delete']))
    )
    print(f"ディスククリーンアップ完了: {cleaned}ファイル削除"))
    return True)
''',)
            'confidence': confidence,)
            'estimated_time': 25)
        })
        )
    def _generate_permission_fix(self, problem, confidence):)
        """権限修正生成""")
        return {)
            'problem': problem,)
            'method': 'permission_fix',)
            'code': f''')
# 自動生成：ファイル権限修正)
def fix_permissions():)
    import os)
    import stat)
    )
    file_path = "{problem.get('file', '')}")
    try:)
        # 所有者のみ読み書き可能に設定)
        os.chmod(file_path, stat.S_IRUSR | stat.S_IWUSR))
        print(f"権限修正完了: {{file_path}}"))
        return True)
    except Exception as e:)
        print(f"権限修正エラー: {{e}}"))
        return False)
''',)
            'confidence': confidence,)
            'estimated_time': 5)
        })
        )
    def _generate_backup_cleanup(self, problem, confidence):)
        """バックアップクリーンアップ生成""")
        return {)
            'problem': problem,)
            'method': 'backup_cleanup',)
            'code': ''')
# 自動生成：バックアップクリーンアップ)
def cleanup_backups():)
    import glob)
    import os)
    from datetime import datetime, timedelta)
    )
    cutoff = datetime.now() - timedelta(days=7))
    cleaned = 0)
    )
    backup_patterns = ["*.backup*", "system_backups/backup_*"])
    for pattern in backup_patterns:)
        for backup_file in glob.glob(pattern):)
            try:)
                mtime = datetime.fromtimestamp(os.path.getmtime(backup_file)))
                if mtime < cutoff:)
                    if os.path.isfile(backup_file):)
                        os.remove(backup_file))
                    elif os.path.isdir(backup_file):)
                        shutil.rmtree(backup_file))
                    cleaned += 1)
            except:)
                pass)
                )
    print(f"バックアップクリーンアップ完了: {cleaned}項目削除"))
    return True)
''',)
            'confidence': confidence,)
            'estimated_time': 20)
        })
        )
    def _implement_verify_learn(self, solutions):)
        """実装・検証・学習""")
        print("\n🔧 解決策実装・検証・学習"))
        )
        results = [])
        )
        for solution in solutions:)
            print(f"   実装中: {solution['method']}"))
            )
            try:)
                # 解決策実装)
                success = self._execute_solution(solution))
                )
                result = {)
                    'solution': solution,)
                    'success': success,)
                    'timestamp': datetime.now().isoformat(),)
                    'execution_time': solution.get('estimated_time', 30))
                })
                )
                if success:)
                    print(f"   ✅ 成功: {solution['method']}"))
                    self.problems_solved += 1)
                else:)
                    print(f"   ❌ 失敗: {solution['method']}"))
                    )
                results.append(result))
                self.solutions_generated += 1)
                )
            except Exception as e:)
                print(f"   ⚠️ エラー: {solution['method']} - {e}"))
                results.append({)
                    'solution': solution,)
                    'success': False,)
                    'error': str(e),)
                    'timestamp': datetime.now().isoformat())
                }))
                )
        return results)
        )
    def _execute_solution(self, solution):)
        """解決策実行""")
        try:)
            # 解決策コードを一時ファイルに保存)
            temp_file = f"/tmp/auto_fix_{solution['method']}.py")
            with open(temp_file, 'w') as f:)
                f.write(solution['code']))
                )
            # 実行)
            result = subprocess.run(['python3', temp_file], )
                                  capture_output=True, text=True, timeout=60))
            )
            # クリーンアップ)
            os.remove(temp_file))
            )
            return result.returncode == 0)
            )
        except subprocess.TimeoutExpired:)
            print("   ⏱️ 実行タイムアウト"))
            return False)
        except Exception as e:)
            print(f"   ❌ 実行エラー: {e}"))
            return False)
            )
    def _enhanced_learning_update(self, results):)
        """強化学習更新""")
        print("\n📚 知識ベース強化学習更新"))
        )
        with open(self.knowledge_base, 'r') as f:)
            knowledge = json.load(f))
            )
        # 成功パターン学習)
        successful_fixes = knowledge.setdefault('successful_fixes', {}))
        )
        for result in results:)
            method = result['solution']['method'])
            problem_type = result['solution']['problem']['type'])
            )
            if result['success']:)
                if problem_type not in successful_fixes:)
                    successful_fixes[problem_type] = {)
                        'method': method,)
                        'success_count': 0,)
                        'total_attempts': 0,)
                        'success_rate': 0.0,)
                        'last_success': None)
                    })
                    )
                fix_data = successful_fixes[problem_type])
                fix_data['success_count'] += 1)
                fix_data['total_attempts'] += 1)
                fix_data['success_rate'] = fix_data['success_count'] / fix_data['total_attempts'])
                fix_data['last_success'] = result['timestamp'])
                )
        # 学習統計更新)
        knowledge['learning_stats'] = {)
            'total_problems_analyzed': len(results),)
            'successful_fixes': self.problems_solved,)
            'solutions_generated': self.solutions_generated,)
            'learning_rate': self.problems_solved / max(self.solutions_generated, 1),)
            'last_learning_session': datetime.now().isoformat())
        })
        )
        with open(self.knowledge_base, 'w') as f:)
            json.dump(knowledge, f, indent=2))
            )
        print(f"   📈 学習完了: 成功率 {self.problems_solved}/{self.solutions_generated}"))
        )
    def _setup_continuous_evolution(self):)
        """継続的自動進化設定""")
        print("\n🔄 継続的自動進化設定"))
        )
        try:)
            # cron設定に自動進化を追加)
            cron_command = f"0 */6 * * * cd {self.base_dir} && python3 self_evolving_ai_v2.py >> logs/evolution.log 2>&1")
            )
            # 既存のcrontabを取得)
            result = subprocess.run(['crontab', '-l'], capture_output=True, text=True))
            current_cron = result.stdout if result.returncode == 0 else "")
            )
            # 自動進化ジョブが未設定の場合追加)
            if 'self_evolving_ai_v2.py' not in current_cron:)
                new_cron = current_cron.rstrip() + f"\n{cron_command}\n")
                )
                # 新しいcrontabを設定)
                proc = subprocess.Popen(['crontab', '-'], stdin=subprocess.PIPE, text=True))
                proc.communicate(input=new_cron))
                )
                if proc.returncode == 0:)
                    print("   ✅ 6時間ごとの自動進化スケジュール設定完了"))
                else:)
                    print("   ❌ cron設定失敗"))
            else:)
                print("   ✅ 自動進化スケジュール既に設定済み"))
                )
        except Exception as e:)
            print(f"   ⚠️ 継続設定エラー: {e}"))
            )
    def _generate_enhanced_report(self, problems, results):)
        """強化レポート生成""")
        print("\n" + "=" * 60))
        print("📊 自己進化AI v2.0 - 強化学習完了レポート"))
        print("=" * 60))
        )
        print(f"\n🔍 実問題検出結果:"))
        print(f"   検出された問題: {len(problems)}件"))
        )
        problem_types = {})
        for problem in problems:)
            ptype = problem['type'])
            problem_types[ptype] = problem_types.get(ptype, 0) + 1)
            )
        for ptype, count in problem_types.items():)
            print(f"   • {ptype}: {count}件"))
            )
        print(f"\n🧠 学習ベース解決:"))
        print(f"   生成された解決策: {self.solutions_generated}件"))
        print(f"   成功した修正: {self.problems_solved}件"))
        )
        if self.solutions_generated > 0:)
            success_rate = (self.problems_solved / self.solutions_generated) * 100)
            print(f"   成功率: {success_rate:.1f}%"))
            )
        print(f"\n🚀 継続的進化:"))
        print(f"   6時間ごとの自動進化スケジュール設定"))
        print(f"   次回実行: 6時間後"))
        )
        # 知識ベース統計)
        with open(self.knowledge_base, 'r') as f:)
            knowledge = json.load(f))
            )
        stats = knowledge.get('learning_stats', {}))
        successful_fixes = knowledge.get('successful_fixes', {}))
        )
        print(f"\n📚 累積知識:"))
        print(f"   解決可能問題タイプ: {len(successful_fixes)}種類"))
        print(f"   学習率: {stats.get('learning_rate', 0):.2f}"))
        )
        print(f"\n🎯 進化展望:"))
        print(f"   継続的問題検出・解決により完全自動化達成"))
        print(f"   人間の手作業完全排除まで自動進化継続"))
        )
        print("=" * 60))
        )
    def _initialize_enhanced_knowledge(self):)
        """)
